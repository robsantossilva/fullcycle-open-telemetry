import { CollectorExporterBase, collectorTypes } from '@opentelemetry/exporter-collector';
import { Metadata } from '@grpc/grpc-js';
import { CollectorExporterConfigNode, GRPCQueueItem, ServiceClientType } from './types';
import { ServiceClient } from './types';
/**
 * Collector Metric Exporter abstract base class
 */
export declare abstract class CollectorExporterNodeBase<ExportItem, ServiceRequest> extends CollectorExporterBase<CollectorExporterConfigNode, ExportItem, ServiceRequest> {
    grpcQueue: GRPCQueueItem<ExportItem>[];
    metadata?: Metadata;
    serviceClient?: ServiceClient;
    private _send;
    constructor(config?: CollectorExporterConfigNode);
    private _sendPromise;
    onInit(config: CollectorExporterConfigNode): void;
    send(objects: ExportItem[], onSuccess: () => void, onError: (error: collectorTypes.CollectorExporterError) => void): void;
    onShutdown(): void;
    abstract getServiceProtoPath(): string;
    abstract getServiceClientType(): ServiceClientType;
}
//# sourceMappingURL=CollectorExporterNodeBase.d.ts.map